#!groovy
@Library('delorean-pipeline-library') _

pipeline {
    agent any

    parameters {
        // https://datagrepper.engineering.redhat.com/id?id=ID:messaging-devops-broker02.web.prod.ext.phx2.redhat.com-44775-1580379079663-8:893046:0:0:1&is_raw=true&size=extra-large
        string defaultValue: '', description: 'This will be populated by the CI trigger', name: 'CI_MESSAGE', trim: true
        string defaultValue: '', description: 'The name of the product', name: 'product'
        string defaultValue: '', description: 'The name of the product', name: 'productOperator'
        string defaultValue: 'delorean-ews', description: 'The base branch for the <product>-next branch', name: 'baseBranch'
        string defaultValue: 'cloud-services-delorean@redhat.com', description: 'An email address which recieves a mail generated by the pipeline', name: 'mailTo'
        booleanParam defaultValue: false, description: '[OPTIONAL] Dry run, disables steps which impact external systems!', name: 'dryRun'
    }

    environment {
        productBranch = "${product}-next"
    }
    stages {
        stage('Process UMB Message') {
            steps {
                script {
                    sh "echo \"Process UMB Message\""
                    final Map msg = readJSON text: CI_MESSAGE
                    image = msg.info.extra.image.index.pull[1]
                    sh "echo Image to process: ${image}"
                }
            }
        }

        stage('Clone Operator Repo') {
            steps {
                cleanWs()
                git branch: '${baseBranch}', url: 'https://github.com/integr8ly/integreatly-operator'
            }
        }

        stage("Ensure Product Branch") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'githubjenkins', passwordVariable: 'gitPassword', usernameVariable: 'gitUsername')]) {
                    sh("""
                        git config --global user.name 'Automatron'
                        git config --global user.email 'github.eng@feedhenry.com'
                        git config --global credential.username ${gitUsername}
                        git config --global credential.helper "!echo password=${gitPassword}; echo"
                       """)
                }
                script {
                    def checkout = sh(script: 'git checkout ${productBranch}', returnStatus: true)
                    if (checkout) {
                        sh("""
                            git checkout -B ${productBranch}
                           """)
                    }
                    sh 'git rebase ${baseBranch}'
                }
            }
        }

        stage('Extract Manifests') {
            steps {
                script {
                    gitCommitWhenChanges("Added New image Manifests") { msgs ->
                        sh "scripts/process-image-manifests ${image} ${product} ${productOperator}"
                        sh "git add ."
                    }
                }
            }
        }

        stage('Process Manifest Images') {
            steps {
                gitCommitWhenChanges("Updated image_mirror_mapping") { msgs ->
                    echo "Process Manifest Images - generate image_mirror_mapping files and update CSV with new images tags"
                    sh "scripts/process-csv-images ${product}"
                    sh "git add ."
                }
            }
        }

        stage('Mirror Images') {
            steps {
                script {
                    if (params.dryRun) {
                        println "[DRYRUN] If there are image mappings in any image_mirror_mapping files inside the manifest directory they would be mapped"
                    } else {
                        withCredentials([usernamePassword(credentialsId: "quay-integreatly_delorean", usernameVariable: "USERNAME", passwordVariable: "PASSWORD")]) {
                            sh "docker login -u=\"${USERNAME}\" -p=\"${PASSWORD}\" quay.io"
                            sh "scripts/mirror-images.sh"
                        }
                    }
                }
            }
        }

        stage('Push Branch') {
            steps {
                script {
                    int commmitCount = sh(returnStdout: true, script: "git log origin/${baseBranch}..${productBranch} --pretty=o | wc -l").trim() as int
                    def existingBranchCommitHash = sh(returnStdout: true, script: "git ls-remote origin refs/heads/${productBranch} | cut -f 1").trim()

                    boolean doPush = false

                    if (product != 'master') {
                        if (productBranch != 'master') {
                            if (existingBranchCommitHash) {
                                doPush = true
                            } else {
                                doPush = commmitCount > 0
                            }
                        }
                    }
                    echo "doPush = ${doPush}"
                    if (doPush) {
                        gitPushBranch(productBranch, true)
                    } else {
                        echo "[INFO] Branch push criteria not met for ${productBranch}"
                    }
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                script {
                    if (params.dryRun) {
                        println "[DRYRUN] A pull request would be created"
                    } else {
                        //ToDO Create a Pull Request against the target branch (master) if changes have been made
                        echo "Create Pull Request"
                    }
                }
            }
        }

        stage('Create Jira') {
            steps {
                script {
                    if (params.dryRun) {
                        println "[DRYRUN] A JIRA ticket would be created"
                    } else {
                        //ToDo Create a Jira linked to the pull request for this update if changes have been made
                        echo "Create Jira"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                final Map msg = readJSON text: CI_MESSAGE
                mail(
                        subject: "New build of ${msg.info.name} created in Brew",
                        to: mailTo,
                        body: [
                                "A brew build was created for ${msg.info.name}",
                                "image_url: ${msg.info.extra.image.index.pull[1]}",
                                "product_name: ${msg.info.name}",
                                "jenkins_job: ${env.BUILD_URL}"
                        ].join('\n')
                )
            }
        }
    }
}
